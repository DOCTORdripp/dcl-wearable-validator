import{c as d,g as h}from"./index-BFhrIB3z.js";function b(i,e,s){const t=[],a=d(e),n=h(e.targetSlot);t.push(g(i,a)),t.push(p(i,n.maxMaterials)),t.push(m(i,n.maxTextures)),t.push(x(i)),t.push(f(i)),t.push(A(i)),t.push(v(i)),t.push(M(i)),i.skinning&&t.push($(i)),t.push(F(i)),t.push(N(i)),t.push(S(i));const r=L(t),o=y(i,e);return{overall:r,targetSlot:e.targetSlot,appliedTriangleBudget:a,maxMaterials:n.maxMaterials,maxTextures:n.maxTextures,results:t,notes:o,fileName:s,modelStats:i}}function g(i,e){const s=i.triangleCount,t=s<=e?"PASS":"FAIL";return{id:"triangles",category:"Geometry",expected:`≤ ${e.toLocaleString()} triangles`,actual:`${s.toLocaleString()} triangles`,result:t,tip:t==="FAIL"?`Reduce triangles by ${Math.ceil((s-e)/s*100)}%`:void 0}}function p(i,e){const s=i.materialCountExclAvatarSkin,t=s<=e?"PASS":"FAIL";return{id:"materials",category:"Materials",expected:`≤ ${e} materials`,actual:`${s} materials`,result:t,tip:t==="FAIL"?`Remove ${s-e} material(s) or combine similar materials`:void 0}}function m(i,e){const s=i.usedTextureCount,t=s<=e?"PASS":"FAIL";return{id:"textures",category:"Textures/Maps",expected:`≤ ${e} textures`,actual:`${s} textures`,result:t,tip:t==="FAIL"?`Remove ${s-e} texture(s) or combine similar textures`:void 0}}function x(i){const e=i.textures.filter(t=>t.width>1024||t.height>1024),s=e.length===0?"PASS":"FAIL";return{id:"texture-sizes",category:"Textures/Maps",expected:"All textures ≤ 1024×1024",actual:e.length===0?"All textures within size limit":`${e.length} texture(s) exceed 1024×1024`,result:s,tip:s==="FAIL"?`Resize ${e.map(t=>t.name).join(", ")} to 1024×1024 or smaller`:void 0}}function f(i){const e=i.textures.filter(t=>t.width!==t.height),s=e.length===0?"PASS":"WARN";return{id:"texture-square",category:"Textures/Maps",expected:"All textures are square (recommended)",actual:e.length===0?"All textures are square":`${e.length} texture(s) are not square`,result:s,tip:s==="WARN"?`Make ${e.map(t=>t.name).join(", ")} square for better performance (optional)`:void 0}}function A(i){const e=i.hasNormalMaps?"WARN":"PASS";return{id:"normal-maps",category:"Textures/Maps",expected:"No normal maps (DCL uses toon shader)",actual:i.hasNormalMaps?"Normal maps detected":"No normal maps",result:e,tip:e==="WARN"?"Remove normal maps - DCL uses toon shader that doesn't benefit from normal maps":void 0}}function v(i){const e=i.hasMetallicRoughnessMaps?"WARN":"PASS";return{id:"metallic-roughness-maps",category:"Textures/Maps",expected:"No metallic/roughness maps (DCL uses toon shader)",actual:i.hasMetallicRoughnessMaps?"Metallic/roughness maps detected":"No metallic/roughness maps",result:e,tip:e==="WARN"?"Remove metallic/roughness maps - DCL uses toon shader that doesn't benefit from PBR maps":void 0}}function M(i){const e=i.alphaModes.filter(t=>t==="BLEND"),s=e.length===0?"PASS":"WARN";return{id:"alpha-mode",category:"Textures/Maps",expected:"Prefer MASK over BLEND",actual:e.length===0?"No BLEND alpha modes":`${e.length} material(s) use BLEND alpha mode`,result:s,tip:s==="WARN"?"Switch BLEND alpha modes to MASK for better performance":void 0}}function $(i){if(!i.skinning)return{id:"skin-weights",category:"Skin Weights",expected:"Valid skin weights",actual:"No skinning data",result:"PASS"};const{totalVertices:e,badWeightVertices:s}=i.skinning,t=s/e;let a,n;return t>.03?(a="FAIL",n="Fix skin weights - more than 3% of vertices have invalid weights"):t>.005?(a="WARN",n="Some vertices have invalid skin weights - check weight painting"):a="PASS",{id:"skin-weights",category:"Skin Weights",expected:"≤ 0.5% vertices with bad weights",actual:`${s}/${e} vertices (${(t*100).toFixed(2)}%)`,result:a,tip:n}}function F(i){const{width:e,height:s,depth:t}=i.bbox,a=2.42,n=2.42,r=1.4,o=e>a,u=s>n,c=t>r,l=o||u||c?"FAIL":"PASS";return{id:"dimensions",category:"Dimensions",expected:`≤ ${a}m × ${n}m × ${r}m`,actual:`${e.toFixed(2)}m × ${s.toFixed(2)}m × ${t.toFixed(2)}m`,result:l,tip:l==="FAIL"?`Scale down model to fit within ${a}m × ${n}m × ${r}m bounds`:void 0}}function N(i){const e=i.triangleCount===0,s=i.materialCountExclAvatarSkin===0,t=[];e&&t.push("No triangles found"),s&&t.push("No materials found");const a=t.length===0?"PASS":"FAIL";return{id:"file-integrity",category:"File Integrity",expected:"Valid model structure",actual:t.length===0?"Model structure is valid":t.join(", "),result:a,tip:a==="FAIL"?"Check model export - ensure it contains geometry and materials":void 0}}function S(i){const e=i.fileSizeBytes/1048576,s=3,t=1;let a,n;return e>s?(a="FAIL",n=`File size exceeds DCL limit of ${s}MB. Reduce file size by optimizing textures or simplifying geometry.`):e>t?(a="WARN",n=`File size is ${e.toFixed(2)}MB. For best performance, keep single items under ${t}MB (can be up to 2MB if thumbnail is under 1MB).`):a="PASS",{id:"file-size",category:"File Integrity",expected:`≤ ${s}MB (recommended: ≤ ${t}MB)`,actual:`${e.toFixed(2)}MB`,result:a,tip:n}}function L(i){const e=i.some(t=>t.result==="FAIL"),s=i.some(t=>t.result==="WARN");return e?"FAIL":s?"WARN":"PASS"}function y(i,e){const s=[];return e.targetSlot==="helmet"&&e.hiddenSlots.length>0&&s.push("Helmet with hidden slots: triangle budget combines hidden slot budgets."),e.targetSlot==="hands"&&e.handHidesBase&&s.push("Hand accessory hides base hand: triangle budget increased to 1.5k."),s}export{b as runValidation};
